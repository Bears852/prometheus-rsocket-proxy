buildscript {
  repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    mavenLocal()
  }
  dependencies {
    classpath 'io.spring.gradle:spring-release-plugin:0.20.1'
    classpath 'com.netflix.nebula:nebula-project-plugin:3.4.0'
  }

  configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

apply plugin: 'io.spring.release'

allprojects {
  apply plugin: 'io.spring.license'
  apply plugin: 'io.spring.publishing'

  contacts {
    'jschneider@pivotal.io' {
      moniker 'Jon Schneider'
      github 'jkschneider'
    }
  }

  if (project.extensions.findByName('bintray')) {
    bintray.labels = ['micrometer', 'metrics', 'prometheus', 'rsocket']
    bintray.packageName = 'prometheus-rsocket-proxy'
  }

  afterEvaluate { project ->
    println "I'm building $project.name with version $project.version"
  }

  group = 'io.micrometer.prometheus'

  description = 'RSocket proxy to pull metrics from applications that can only open egress'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'

  checkstyle {
    toolVersion = '8.22'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
  }

  def check = tasks.findByName('check')
  if (check) project.rootProject.tasks.releaseCheck.dependsOn check

  compileJava {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
      options.compilerArgs.addAll(['--release', '8'])
    }
  }

  compileTestJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.current()
    targetCompatibility = JavaVersion.current()
  }

  license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders = true
  }
}

wrapper {
  gradleVersion = '5.6.1'
}

defaultTasks 'build'
